{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DAVID\\\\Desktop\\\\cryptomonitor\\\\front\\\\crypto-monitor-frontend\\\\src\\\\components\\\\pages\\\\TradingBotsPage.jsx\",\n  _s = $RefreshSig$();\n// front/crypto-monitor-frontend/src/components/pages/TradingBotsPage.jsx\n\nimport React, { useState, useEffect } from 'react';\nimport { Bot, Play, Square, Trash2, PlusCircle, TrendingUp, TrendingDown, Activity, X, RefreshCw // ⬅️ ADICIONAR\n} from 'lucide-react';\nimport { API_BASE_URL } from '../../utils/constants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TradingBotsPage({\n  token,\n  user,\n  onBack\n}) {\n  _s();\n  const [bots, setBots] = useState([]);\n  const [showCreateModal, setShowCreateModal] = useState(false);\n  const [selectedBot, setSelectedBot] = useState(null);\n  const [botTrades, setBotTrades] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isRefreshing, setIsRefreshing] = useState(false); // ⬅️ NOVO\n\n  // Form state\n  const [newBot, setNewBot] = useState({\n    name: '',\n    coinSymbol: 'BTC',\n    strategy: 'GRID_TRADING',\n    isSimulation: true,\n    gridLowerPrice: '',\n    gridUpperPrice: '',\n    gridLevels: 10,\n    amountPerGrid: '',\n    dcaAmount: '',\n    dcaIntervalMinutes: 60,\n    stopLossPercent: '',\n    takeProfitPercent: ''\n  });\n\n  // ⬇️ Auto-refresh a cada 1 minuto\n  useEffect(() => {\n    fetchBots();\n    const interval = setInterval(() => {\n      console.log('🔄 Auto-refresh: Atualizando bots...');\n      fetchBots();\n      if (selectedBot) {\n        console.log('🔄 Auto-refresh: Atualizando trades do bot', selectedBot.id);\n        fetchBotTrades(selectedBot.id);\n      }\n    }, 60000); // 60 segundos\n\n    return () => clearInterval(interval);\n  }, [selectedBot]);\n  const fetchBots = async () => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/bots`, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      if (response.ok) {\n        const data = await response.json();\n        console.log('📊 Bots carregados:', data.bots);\n        setBots(data.bots || []);\n      }\n    } catch (error) {\n      console.error('Erro ao buscar bots:', error);\n    }\n  };\n  const fetchBotTrades = async botId => {\n    try {\n      console.log('📈 Buscando trades do bot', botId);\n      const response = await fetch(`${API_BASE_URL}/bots/${botId}/trades`, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      if (response.ok) {\n        const data = await response.json();\n        console.log('📊 Trades carregados:', data.trades);\n        setBotTrades(data.trades || []);\n      }\n    } catch (error) {\n      console.error('Erro ao buscar trades:', error);\n    }\n  };\n\n  // ⬇️ NOVO: Refresh manual\n  const handleRefresh = async () => {\n    setIsRefreshing(true);\n    await fetchBots();\n    if (selectedBot) {\n      await fetchBotTrades(selectedBot.id);\n    }\n    setTimeout(() => setIsRefreshing(false), 500);\n  };\n  const createBot = async () => {\n    setIsLoading(true);\n    try {\n      const response = await fetch(`${API_BASE_URL}/bots`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify(newBot)\n      });\n      if (response.ok) {\n        alert('✅ Bot criado com sucesso!');\n        setShowCreateModal(false);\n        fetchBots();\n        resetForm();\n      } else {\n        const error = await response.json();\n        alert('❌ Erro: ' + (error.message || 'Erro ao criar bot'));\n      }\n    } catch (error) {\n      console.error('Erro ao criar bot:', error);\n      alert('❌ Erro ao criar bot');\n    }\n    setIsLoading(false);\n  };\n  const startBot = async botId => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/bots/${botId}/start`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      if (response.ok) {\n        alert('✅ Bot iniciado! Aguarde 1 minuto para ver os trades.');\n        fetchBots();\n      } else {\n        const error = await response.json();\n        alert('❌ Erro: ' + (error.message || 'Erro ao iniciar bot'));\n      }\n    } catch (error) {\n      console.error('Erro ao iniciar bot:', error);\n      alert('❌ Erro ao iniciar bot');\n    }\n  };\n  const stopBot = async botId => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/bots/${botId}/stop`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      if (response.ok) {\n        alert('🛑 Bot parado!');\n        fetchBots();\n      } else {\n        alert('❌ Erro ao parar bot');\n      }\n    } catch (error) {\n      console.error('Erro ao parar bot:', error);\n    }\n  };\n  const deleteBot = async botId => {\n    if (!window.confirm('Tem certeza que deseja deletar este bot?')) return;\n    try {\n      const response = await fetch(`${API_BASE_URL}/bots/${botId}`, {\n        method: 'DELETE',\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      if (response.ok) {\n        alert('✅ Bot deletado!');\n        fetchBots();\n        if ((selectedBot === null || selectedBot === void 0 ? void 0 : selectedBot.id) === botId) {\n          setSelectedBot(null);\n        }\n      } else {\n        alert('❌ Erro ao deletar bot');\n      }\n    } catch (error) {\n      console.error('Erro ao deletar bot:', error);\n    }\n  };\n  const resetForm = () => {\n    setNewBot({\n      name: '',\n      coinSymbol: 'BTC',\n      strategy: 'GRID_TRADING',\n      isSimulation: true,\n      gridLowerPrice: '',\n      gridUpperPrice: '',\n      gridLevels: 10,\n      amountPerGrid: '',\n      dcaAmount: '',\n      dcaIntervalMinutes: 60,\n      stopLossPercent: '',\n      takeProfitPercent: ''\n    });\n  };\n  const styles = {\n    // ... seus estilos existentes ...\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.header,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        style: styles.title,\n        children: [/*#__PURE__*/_jsxDEV(Bot, {\n          size: 32,\n          color: \"#667eea\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 11\n        }, this), \"Trading Bots\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.buttonGroup,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleRefresh,\n          disabled: isRefreshing,\n          style: {\n            ...styles.button,\n            background: '#667eea',\n            color: 'white',\n            opacity: isRefreshing ? 0.5 : 1\n          },\n          children: [/*#__PURE__*/_jsxDEV(RefreshCw, {\n            size: 20,\n            style: {\n              animation: isRefreshing ? 'spin 1s linear infinite' : 'none'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 246,\n            columnNumber: 13\n          }, this), \"Atualizar\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setShowCreateModal(true),\n          style: {\n            ...styles.button,\n            ...styles.primaryButton\n          },\n          children: [/*#__PURE__*/_jsxDEV(PlusCircle, {\n            size: 20\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 13\n          }, this), \"Criar Bot\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: onBack,\n          style: {\n            ...styles.button,\n            background: '#6c757d',\n            color: 'white'\n          },\n          children: \"\\u2190 Voltar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 7\n    }, this), selectedBot && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.modal,\n      onClick: () => setSelectedBot(null),\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          ...styles.modalContent,\n          maxWidth: '800px'\n        },\n        onClick: e => e.stopPropagation(),\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n            marginBottom: '25px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            style: {\n              margin: 0,\n              fontSize: '24px',\n              fontWeight: 'bold'\n            },\n            children: selectedBot.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 290,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              gap: '10px',\n              alignItems: 'center'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: handleRefresh,\n              style: {\n                padding: '10px',\n                background: '#667eea',\n                color: 'white',\n                border: 'none',\n                borderRadius: '10px',\n                cursor: 'pointer',\n                display: 'flex',\n                alignItems: 'center',\n                gap: '5px'\n              },\n              children: /*#__PURE__*/_jsxDEV(RefreshCw, {\n                size: 18\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 309,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 295,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => setSelectedBot(null),\n              style: {\n                background: 'none',\n                border: 'none',\n                cursor: 'pointer',\n                color: '#999'\n              },\n              children: /*#__PURE__*/_jsxDEV(X, {\n                size: 24\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 321,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 312,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 294,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          style: {\n            fontSize: '18px',\n            fontWeight: 'bold',\n            marginBottom: '15px',\n            color: '#333'\n          },\n          children: [\"Hist\\xF3rico de Trades (\", botTrades.length, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"style\", {\n      children: `\n        @keyframes spin {\n          from { transform: rotate(0deg); }\n          to { transform: rotate(360deg); }\n        }\n      `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 226,\n    columnNumber: 5\n  }, this);\n}\n_s(TradingBotsPage, \"GYc66VGzCL51HlBaBjzo5crAuog=\");\n_c = TradingBotsPage;\nexport default TradingBotsPage;\nvar _c;\n$RefreshReg$(_c, \"TradingBotsPage\");","map":{"version":3,"names":["React","useState","useEffect","Bot","Play","Square","Trash2","PlusCircle","TrendingUp","TrendingDown","Activity","X","RefreshCw","API_BASE_URL","jsxDEV","_jsxDEV","TradingBotsPage","token","user","onBack","_s","bots","setBots","showCreateModal","setShowCreateModal","selectedBot","setSelectedBot","botTrades","setBotTrades","isLoading","setIsLoading","isRefreshing","setIsRefreshing","newBot","setNewBot","name","coinSymbol","strategy","isSimulation","gridLowerPrice","gridUpperPrice","gridLevels","amountPerGrid","dcaAmount","dcaIntervalMinutes","stopLossPercent","takeProfitPercent","fetchBots","interval","setInterval","console","log","id","fetchBotTrades","clearInterval","response","fetch","headers","ok","data","json","error","botId","trades","handleRefresh","setTimeout","createBot","method","body","JSON","stringify","alert","resetForm","message","startBot","stopBot","deleteBot","window","confirm","styles","style","container","children","header","title","size","color","fileName","_jsxFileName","lineNumber","columnNumber","buttonGroup","onClick","disabled","button","background","opacity","animation","primaryButton","modal","modalContent","maxWidth","e","stopPropagation","display","justifyContent","alignItems","marginBottom","margin","fontSize","fontWeight","gap","padding","border","borderRadius","cursor","length","_c","$RefreshReg$"],"sources":["C:/Users/DAVID/Desktop/cryptomonitor/front/crypto-monitor-frontend/src/components/pages/TradingBotsPage.jsx"],"sourcesContent":["// front/crypto-monitor-frontend/src/components/pages/TradingBotsPage.jsx\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport {\r\n  Bot,\r\n  Play,\r\n  Square,\r\n  Trash2,\r\n  PlusCircle,\r\n  TrendingUp,\r\n  TrendingDown,\r\n  Activity,\r\n  X,\r\n  RefreshCw // ⬅️ ADICIONAR\r\n} from 'lucide-react';\r\nimport { API_BASE_URL } from '../../utils/constants';\r\n\r\nfunction TradingBotsPage({ token, user, onBack }) {\r\n  const [bots, setBots] = useState([]);\r\n  const [showCreateModal, setShowCreateModal] = useState(false);\r\n  const [selectedBot, setSelectedBot] = useState(null);\r\n  const [botTrades, setBotTrades] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isRefreshing, setIsRefreshing] = useState(false); // ⬅️ NOVO\r\n\r\n  // Form state\r\n  const [newBot, setNewBot] = useState({\r\n    name: '',\r\n    coinSymbol: 'BTC',\r\n    strategy: 'GRID_TRADING',\r\n    isSimulation: true,\r\n    gridLowerPrice: '',\r\n    gridUpperPrice: '',\r\n    gridLevels: 10,\r\n    amountPerGrid: '',\r\n    dcaAmount: '',\r\n    dcaIntervalMinutes: 60,\r\n    stopLossPercent: '',\r\n    takeProfitPercent: ''\r\n  });\r\n\r\n  // ⬇️ Auto-refresh a cada 1 minuto\r\n  useEffect(() => {\r\n    fetchBots();\r\n    \r\n    const interval = setInterval(() => {\r\n      console.log('🔄 Auto-refresh: Atualizando bots...');\r\n      fetchBots();\r\n      \r\n      if (selectedBot) {\r\n        console.log('🔄 Auto-refresh: Atualizando trades do bot', selectedBot.id);\r\n        fetchBotTrades(selectedBot.id);\r\n      }\r\n    }, 60000); // 60 segundos\r\n    \r\n    return () => clearInterval(interval);\r\n  }, [selectedBot]);\r\n\r\n  const fetchBots = async () => {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/bots`, {\r\n        headers: {\r\n          'Authorization': `Bearer ${token}`\r\n        }\r\n      });\r\n\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        console.log('📊 Bots carregados:', data.bots);\r\n        setBots(data.bots || []);\r\n      }\r\n    } catch (error) {\r\n      console.error('Erro ao buscar bots:', error);\r\n    }\r\n  };\r\n\r\n  const fetchBotTrades = async (botId) => {\r\n    try {\r\n      console.log('📈 Buscando trades do bot', botId);\r\n      \r\n      const response = await fetch(`${API_BASE_URL}/bots/${botId}/trades`, {\r\n        headers: {\r\n          'Authorization': `Bearer ${token}`\r\n        }\r\n      });\r\n\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        console.log('📊 Trades carregados:', data.trades);\r\n        setBotTrades(data.trades || []);\r\n      }\r\n    } catch (error) {\r\n      console.error('Erro ao buscar trades:', error);\r\n    }\r\n  };\r\n\r\n  // ⬇️ NOVO: Refresh manual\r\n  const handleRefresh = async () => {\r\n    setIsRefreshing(true);\r\n    await fetchBots();\r\n    \r\n    if (selectedBot) {\r\n      await fetchBotTrades(selectedBot.id);\r\n    }\r\n    \r\n    setTimeout(() => setIsRefreshing(false), 500);\r\n  };\r\n\r\n  const createBot = async () => {\r\n    setIsLoading(true);\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/bots`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${token}`\r\n        },\r\n        body: JSON.stringify(newBot)\r\n      });\r\n\r\n      if (response.ok) {\r\n        alert('✅ Bot criado com sucesso!');\r\n        setShowCreateModal(false);\r\n        fetchBots();\r\n        resetForm();\r\n      } else {\r\n        const error = await response.json();\r\n        alert('❌ Erro: ' + (error.message || 'Erro ao criar bot'));\r\n      }\r\n    } catch (error) {\r\n      console.error('Erro ao criar bot:', error);\r\n      alert('❌ Erro ao criar bot');\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  const startBot = async (botId) => {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/bots/${botId}/start`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Authorization': `Bearer ${token}`\r\n        }\r\n      });\r\n\r\n      if (response.ok) {\r\n        alert('✅ Bot iniciado! Aguarde 1 minuto para ver os trades.');\r\n        fetchBots();\r\n      } else {\r\n        const error = await response.json();\r\n        alert('❌ Erro: ' + (error.message || 'Erro ao iniciar bot'));\r\n      }\r\n    } catch (error) {\r\n      console.error('Erro ao iniciar bot:', error);\r\n      alert('❌ Erro ao iniciar bot');\r\n    }\r\n  };\r\n\r\n  const stopBot = async (botId) => {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/bots/${botId}/stop`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Authorization': `Bearer ${token}`\r\n        }\r\n      });\r\n\r\n      if (response.ok) {\r\n        alert('🛑 Bot parado!');\r\n        fetchBots();\r\n      } else {\r\n        alert('❌ Erro ao parar bot');\r\n      }\r\n    } catch (error) {\r\n      console.error('Erro ao parar bot:', error);\r\n    }\r\n  };\r\n\r\n  const deleteBot = async (botId) => {\r\n    if (!window.confirm('Tem certeza que deseja deletar este bot?')) return;\r\n\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/bots/${botId}`, {\r\n        method: 'DELETE',\r\n        headers: {\r\n          'Authorization': `Bearer ${token}`\r\n        }\r\n      });\r\n\r\n      if (response.ok) {\r\n        alert('✅ Bot deletado!');\r\n        fetchBots();\r\n        if (selectedBot?.id === botId) {\r\n          setSelectedBot(null);\r\n        }\r\n      } else {\r\n        alert('❌ Erro ao deletar bot');\r\n      }\r\n    } catch (error) {\r\n      console.error('Erro ao deletar bot:', error);\r\n    }\r\n  };\r\n\r\n  const resetForm = () => {\r\n    setNewBot({\r\n      name: '',\r\n      coinSymbol: 'BTC',\r\n      strategy: 'GRID_TRADING',\r\n      isSimulation: true,\r\n      gridLowerPrice: '',\r\n      gridUpperPrice: '',\r\n      gridLevels: 10,\r\n      amountPerGrid: '',\r\n      dcaAmount: '',\r\n      dcaIntervalMinutes: 60,\r\n      stopLossPercent: '',\r\n      takeProfitPercent: ''\r\n    });\r\n  };\r\n\r\n  const styles = {\r\n    // ... seus estilos existentes ...\r\n  };\r\n\r\n  return (\r\n    <div style={styles.container}>\r\n      {/* Header */}\r\n      <div style={styles.header}>\r\n        <h1 style={styles.title}>\r\n          <Bot size={32} color=\"#667eea\" />\r\n          Trading Bots\r\n        </h1>\r\n        \r\n        <div style={styles.buttonGroup}>\r\n          {/* ⬇️ BOTÃO DE REFRESH */}\r\n          <button\r\n            onClick={handleRefresh}\r\n            disabled={isRefreshing}\r\n            style={{\r\n              ...styles.button,\r\n              background: '#667eea',\r\n              color: 'white',\r\n              opacity: isRefreshing ? 0.5 : 1\r\n            }}\r\n          >\r\n            <RefreshCw \r\n              size={20} \r\n              style={{ animation: isRefreshing ? 'spin 1s linear infinite' : 'none' }}\r\n            />\r\n            Atualizar\r\n          </button>\r\n          \r\n          <button\r\n            onClick={() => setShowCreateModal(true)}\r\n            style={{...styles.button, ...styles.primaryButton}}\r\n          >\r\n            <PlusCircle size={20} />\r\n            Criar Bot\r\n          </button>\r\n          \r\n          <button\r\n            onClick={onBack}\r\n            style={{\r\n              ...styles.button,\r\n              background: '#6c757d',\r\n              color: 'white'\r\n            }}\r\n          >\r\n            ← Voltar\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* ... resto do código ... */}\r\n\r\n      {/* Modal de Detalhes - ATUALIZADO */}\r\n      {selectedBot && (\r\n        <div style={styles.modal} onClick={() => setSelectedBot(null)}>\r\n          <div\r\n            style={{...styles.modalContent, maxWidth: '800px'}}\r\n            onClick={(e) => e.stopPropagation()}\r\n          >\r\n            {/* ⬇️ Header com botão de refresh */}\r\n            <div style={{\r\n              display: 'flex',\r\n              justifyContent: 'space-between',\r\n              alignItems: 'center',\r\n              marginBottom: '25px'\r\n            }}>\r\n              <h2 style={{margin: 0, fontSize: '24px', fontWeight: 'bold'}}>\r\n                {selectedBot.name}\r\n              </h2>\r\n              \r\n              <div style={{display: 'flex', gap: '10px', alignItems: 'center'}}>\r\n                <button\r\n                  onClick={handleRefresh}\r\n                  style={{\r\n                    padding: '10px',\r\n                    background: '#667eea',\r\n                    color: 'white',\r\n                    border: 'none',\r\n                    borderRadius: '10px',\r\n                    cursor: 'pointer',\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    gap: '5px'\r\n                  }}\r\n                >\r\n                  <RefreshCw size={18} />\r\n                </button>\r\n                \r\n                <button\r\n                  onClick={() => setSelectedBot(null)}\r\n                  style={{\r\n                    background: 'none',\r\n                    border: 'none',\r\n                    cursor: 'pointer',\r\n                    color: '#999'\r\n                  }}\r\n                >\r\n                  <X size={24} />\r\n                </button>\r\n              </div>\r\n            </div>\r\n\r\n            {/* ... resto do modal ... */}\r\n\r\n            {/* Histórico de Trades */}\r\n            <h3 style={{\r\n              fontSize: '18px',\r\n              fontWeight: 'bold',\r\n              marginBottom: '15px',\r\n              color: '#333'\r\n            }}>\r\n              Histórico de Trades ({botTrades.length})\r\n            </h3>\r\n\r\n            {/* ... resto do código dos trades ... */}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      <style>{`\r\n        @keyframes spin {\r\n          from { transform: rotate(0deg); }\r\n          to { transform: rotate(360deg); }\r\n        }\r\n      `}</style>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TradingBotsPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}