// back/src/main/java/com/crypto/service/MonitoringControlService.java
package com.crypto.service;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.scheduling.TaskScheduler;
import org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler;
import org.springframework.stereotype.Service;

import jakarta.annotation.PreDestroy;
import java.time.Duration;
import java.time.Instant;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

/**
 * ‚úÖ REFATORADO - THREAD-SAFE COM LOCKS
 *
 * CORRE√á√ïES:
 * - Lock por usu√°rio para evitar race conditions
 * -putIfAbsent() at√¥mico ao inv√©s de containsKey() + put()
 * - Shutdown graceful com @PreDestroy
 * - Valida√ß√£o de estado antes de opera√ß√µes
 * - Logs detalhados para debugging
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class MonitoringControlService {

    private final CryptoMonitoringService cryptoMonitoringService;

    // ‚úÖ MANTIDO: Armazena schedulers ativos
    private final Map<String, ScheduledFuture<?>> activeMonitors = new ConcurrentHashMap<>();

    // ‚úÖ NOVO: Locks por usu√°rio para opera√ß√µes at√¥micas
    private final Map<String, Lock> userLocks = new ConcurrentHashMap<>();

    // ‚úÖ NOVO: Metadata dos monitoramentos (timestamp, email)
    private final Map<String, MonitoringMetadata> monitoringMetadata = new ConcurrentHashMap<>();

    // ‚úÖ MANTIDO: Task scheduler configur√°vel
    private final TaskScheduler taskScheduler = createTaskScheduler();

    /**
     * ‚úÖ REFATORADO - Thread-safe com lock por usu√°rio
     */
    public boolean startMonitoring(String username, String userEmail) {
        if (username == null || username.trim().isEmpty()) {
            log.error("‚ùå Username n√£o pode ser nulo ou vazio");
            return false;
        }

        if (userEmail == null || userEmail.trim().isEmpty()) {
            log.error("‚ùå Email n√£o pode ser nulo ou vazio");
            return false;
        }

        // ‚úÖ NOVO: Obter lock espec√≠fico do usu√°rio (thread-safe)
        Lock userLock = userLocks.computeIfAbsent(username, k -> new ReentrantLock());

        userLock.lock();
        try {
            // ‚úÖ NOVO: Verifica√ß√£o at√¥mica dentro do lock
            if (isMonitoringActiveInternal(username)) {
                log.warn("‚ö†Ô∏è Monitoramento j√° ativo para usu√°rio: {}", username);
                return false;
            }

            log.info("üöÄ Iniciando monitoramento para: {} (email: {})", username, userEmail);

            // ‚úÖ MELHORADO: Criar e agendar tarefa
            ScheduledFuture<?> scheduledTask = taskScheduler.scheduleAtFixedRate(
                    () -> runMonitoringCycle(username, userEmail),
                    Duration.ofMinutes(5)
            );

            // ‚úÖ NOVO: Usar putIfAbsent para garantir atomicidade
            ScheduledFuture<?> existing = activeMonitors.putIfAbsent(username, scheduledTask);

            if (existing != null) {
                // ‚úÖ NOVO: Se j√° existia, cancelar a nova tarefa
                scheduledTask.cancel(false);
                log.warn("‚ö†Ô∏è Scheduler j√° existia para {}, cancelando duplicado", username);
                return false;
            }

            // ‚úÖ NOVO: Armazenar metadata
            monitoringMetadata.put(username, new MonitoringMetadata(userEmail, Instant.now()));

            log.info("‚úÖ Monitoramento INICIADO para: {} (email: {})", username, userEmail);

            // ‚úÖ NOVO: Executar primeira verifica√ß√£o imediatamente (em thread separada)
            runFirstCheckAsync(username, userEmail);

            return true;

        } catch (Exception e) {
            log.error("‚ùå Erro ao iniciar monitoramento para {}: {}", username, e.getMessage(), e);
            return false;

        } finally {
            userLock.unlock();
        }
    }

    /**
     * ‚úÖ REFATORADO - Thread-safe com lock por usu√°rio
     */
    public boolean stopMonitoring(String username) {
        if (username == null || username.trim().isEmpty()) {
            log.error("‚ùå Username n√£o pode ser nulo ou vazio");
            return false;
        }

        // ‚úÖ NOVO: Obter lock espec√≠fico do usu√°rio
        Lock userLock = userLocks.computeIfAbsent(username, k -> new ReentrantLock());

        userLock.lock();
        try {
            ScheduledFuture<?> scheduledTask = activeMonitors.get(username);

            if (scheduledTask == null) {
                log.warn("‚ö†Ô∏è Nenhum monitoramento ativo para: {}", username);
                return false;
            }

            // ‚úÖ MELHORADO: Verificar se j√° est√° cancelado
            if (scheduledTask.isCancelled() || scheduledTask.isDone()) {
                log.warn("‚ö†Ô∏è Scheduler j√° estava cancelado/finalizado para: {}", username);
                activeMonitors.remove(username);
                monitoringMetadata.remove(username);
                return false;
            }

            // ‚úÖ MELHORADO: Cancelar tarefa com flag false (n√£o interromper se rodando)
            boolean cancelled = scheduledTask.cancel(false);

            if (cancelled) {
                activeMonitors.remove(username);
                monitoringMetadata.remove(username);
                log.info("üõë Monitoramento PARADO para: {}", username);
                return true;
            } else {
                log.warn("‚ö†Ô∏è Falha ao cancelar scheduler para: {}", username);
                return false;
            }

        } catch (Exception e) {
            log.error("‚ùå Erro ao parar monitoramento para {}: {}", username, e.getMessage(), e);
            return false;

        } finally {
            userLock.unlock();
        }
    }

    /**
     * ‚úÖ REFATORADO - Verifica√ß√£o thread-safe
     */
    public boolean isMonitoringActive(String username) {
        if (username == null || username.trim().isEmpty()) {
            return false;
        }
        return isMonitoringActiveInternal(username);
    }

    /**
     * ‚úÖ NOVO - Verifica√ß√£o interna thread-safe
     */
    private boolean isMonitoringActiveInternal(String username) {
        ScheduledFuture<?> task = activeMonitors.get(username);

        if (task == null) {
            return false;
        }

        // ‚úÖ MELHORADO: Verificar se est√° realmente ativo
        boolean isActive = !task.isCancelled() && !task.isDone();

        // ‚úÖ NOVO: Limpar se estiver inativo
        if (!isActive) {
            activeMonitors.remove(username);
            monitoringMetadata.remove(username);
        }

        return isActive;
    }

    /**
     * ‚úÖ MELHORADO - Status detalhado com metadata
     */
    public Map<String, Object> getMonitoringStatus(String username) {
        boolean isActive = isMonitoringActive(username);
        MonitoringMetadata metadata = monitoringMetadata.get(username);

        return Map.of(
                "username", username,
                "active", isActive,
                "email", metadata != null ? metadata.getEmail() : "N/A",
                "startedAt", metadata != null ? metadata.getStartedAt().toEpochMilli() : 0,
                "totalActiveMonitors", activeMonitors.size(),
                "timestamp", System.currentTimeMillis()
        );
    }

    /**
     * ‚úÖ NOVO - Status global do sistema
     */
    public Map<String, Object> getGlobalStatus() {
        return Map.of(
                "totalActiveMonitors", activeMonitors.size(),
                "activeUsers", activeMonitors.keySet(),
                "timestamp", System.currentTimeMillis(),
                "systemHealthy", true
        );
    }

    /**
     * ‚úÖ REFATORADO - Execu√ß√£o com try-catch individual
     */
    private void runMonitoringCycle(String username, String userEmail) {
        try {
            log.debug("üîÑ Executando ciclo de monitoramento para: {}", username);

            // ‚úÖ MELHORADO: Verificar se ainda est√° ativo antes de executar
            if (!isMonitoringActiveInternal(username)) {
                log.warn("‚ö†Ô∏è Monitoramento n√£o est√° mais ativo para: {}", username);
                return;
            }

            // Delega para o servi√ßo de monitoramento
            cryptoMonitoringService.updateAndProcessAlertsForUser(userEmail);

            log.debug("‚úÖ Ciclo conclu√≠do para: {}", username);

        } catch (Exception e) {
            log.error("‚ùå Erro no ciclo de monitoramento para {}: {}", username, e.getMessage(), e);
            // ‚úÖ NOVO: N√£o cancelar automaticamente em caso de erro
            // Deixar continuar tentando nos pr√≥ximos ciclos
        }
    }

    /**
     * ‚úÖ NOVO - Primeira verifica√ß√£o ass√≠ncrona
     */
    private void runFirstCheckAsync(String username, String userEmail) {
        new Thread(() -> {
            try {
                Thread.sleep(2000); // Delay de 2s para n√£o sobrecarregar
                runMonitoringCycle(username, userEmail);
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
                log.warn("‚ö†Ô∏è Primeira verifica√ß√£o interrompida para: {}", username);
            }
        }, "FirstCheck-" + username).start();
    }

    /**
     * ‚úÖ REFATORADO - Parar todos com locks
     */
    public void stopAllMonitoring() {
        log.info("üõë Parando todos os monitoramentos ativos ({} usu√°rios)...", activeMonitors.size());

        // ‚úÖ NOVO: Copiar keys para evitar ConcurrentModificationException
        activeMonitors.keySet().stream()
                .toList() // Snapshot das keys
                .forEach(this::stopMonitoring);

        log.info("‚úÖ Todos os monitoramentos parados");
    }

    /**
     * ‚úÖ NOVO - Shutdown graceful
     */
    @PreDestroy
    public void shutdown() {
        log.info("üîå Encerrando MonitoringControlService...");

        stopAllMonitoring();

        if (taskScheduler instanceof ThreadPoolTaskScheduler) {
            ((ThreadPoolTaskScheduler) taskScheduler).shutdown();
        }

        log.info("‚úÖ MonitoringControlService encerrado");
    }

    /**
     * ‚úÖ MANTIDO - Cria√ß√£o do TaskScheduler
     */
    private TaskScheduler createTaskScheduler() {
        ThreadPoolTaskScheduler scheduler = new ThreadPoolTaskScheduler();
        scheduler.setPoolSize(10);
        scheduler.setThreadNamePrefix("crypto-monitor-");
        scheduler.setWaitForTasksToCompleteOnShutdown(true);
        scheduler.setAwaitTerminationSeconds(60);
        scheduler.setRejectedExecutionHandler(new java.util.concurrent.ThreadPoolExecutor.CallerRunsPolicy());
        scheduler.initialize();
        return scheduler;
    }

    /**
     * ‚úÖ NOVO - Classe interna para metadata
     */
    private static class MonitoringMetadata {
        private final String email;
        private final Instant startedAt;

        public MonitoringMetadata(String email, Instant startedAt) {
            this.email = email;
            this.startedAt = startedAt;
        }

        public String getEmail() {
            return email;
        }

        public Instant getStartedAt() {
            return startedAt;
        }
    }
}