// back/src/main/java/com/crypto/service/CryptoMonitoringService.java
package com.crypto.service;

import com.crypto.dto.CryptoCurrency;
import com.crypto.event.CryptoUpdateEvent;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.context.ApplicationEventPublisher;
import org.springframework.stereotype.Service;

import java.util.List;

/**
 * ‚úÖ REFATORADO - SEM DEPEND√äNCIA CIRCULAR
 *
 * ANTES:
 * CryptoMonitoringService ‚Üí AlertService ‚Üí CryptoService ‚Üí [circular]
 *
 * AGORA:
 * CryptoMonitoringService ‚Üí CryptoService
 *                         ‚Üí Event Publisher
 *                              ‚Üì
 *                         AlertEventListener ‚Üí AlertService
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class CryptoMonitoringService {

    private final CryptoService cryptoService;
    private final ApplicationEventPublisher eventPublisher; // ‚úÖ NOVO

    /**
     * ‚úÖ MANTIDO - Compatibilidade com c√≥digo existente
     * Atualiza√ß√£o e processamento de alertas para todos os usu√°rios
     */
    public void updateAndProcessAlerts() {
        try {
            log.info("üîÑ Iniciando ciclo de monitoramento...");

            // 1. Buscar pre√ßos atuais
            List<CryptoCurrency> currentCryptos = cryptoService.getCurrentPrices();
            log.info("üìä Obtidos pre√ßos de {} criptomoedas", currentCryptos.size());

            // 2. Salvar os dados atualizados
            for (CryptoCurrency crypto : currentCryptos) {
                cryptoService.saveCrypto(crypto);
            }

            // 3. ‚úÖ NOVO: Publicar evento ao inv√©s de chamar AlertService diretamente
            publishCryptoUpdateEvent(currentCryptos, null, CryptoUpdateEvent.UpdateType.SCHEDULED_UPDATE);

            log.info("‚úÖ Ciclo de monitoramento conclu√≠do com sucesso");

        } catch (Exception e) {
            log.error("‚ùå Erro no ciclo de monitoramento: {}", e.getMessage(), e);
        }
    }

    /**
     * ‚úÖ MANTIDO - Atualiza√ß√£o para usu√°rio espec√≠fico
     */
    public void updateAndProcessAlertsForUser(String userEmail) {
        try {
            log.info("üîÑ Iniciando ciclo de monitoramento para email: {}", userEmail);

            // 1. Buscar pre√ßos atuais
            List<CryptoCurrency> currentCryptos = cryptoService.getCurrentPrices();
            log.info("üìä Obtidos pre√ßos de {} criptomoedas", currentCryptos.size());

            // 2. Salvar os dados atualizados
            for (CryptoCurrency crypto : currentCryptos) {
                cryptoService.saveCrypto(crypto);
            }

            // 3. ‚úÖ NOVO: Publicar evento para usu√°rio espec√≠fico
            publishCryptoUpdateEvent(currentCryptos, userEmail, CryptoUpdateEvent.UpdateType.SCHEDULED_UPDATE);

            log.info("‚úÖ Ciclo de monitoramento conclu√≠do para: {}", userEmail);

        } catch (Exception e) {
            log.error("‚ùå Erro no ciclo de monitoramento para {}: {}", userEmail, e.getMessage(), e);
        }
    }

    /**
     * ‚úÖ MANTIDO - Atualiza√ß√£o manual (compatibilidade com endpoint /api/crypto/update)
     */
    public void forceUpdateAndProcessAlerts() {
        try {
            log.info("üöÄ For√ßando atualiza√ß√£o manual...");

            List<CryptoCurrency> currentCryptos = cryptoService.getCurrentPrices();

            for (CryptoCurrency crypto : currentCryptos) {
                cryptoService.saveCrypto(crypto);
            }

            // ‚úÖ NOVO: Publicar evento de atualiza√ß√£o manual
            publishCryptoUpdateEvent(currentCryptos, null, CryptoUpdateEvent.UpdateType.MANUAL_UPDATE);

            log.info("‚úÖ Atualiza√ß√£o manual conclu√≠da. {} moedas processadas", currentCryptos.size());

        } catch (Exception e) {
            log.error("‚ùå Erro na atualiza√ß√£o manual: {}", e.getMessage(), e);
            throw new RuntimeException("Falha na atualiza√ß√£o manual", e);
        }
    }

    /**
     * ‚úÖ MANTIDO - Atualiza√ß√£o manual para usu√°rio espec√≠fico
     */
    public void forceUpdateAndProcessAlertsForUser(String userEmail) {
        try {
            log.info("üöÄ For√ßando atualiza√ß√£o manual para: {}", userEmail);

            List<CryptoCurrency> currentCryptos = cryptoService.getCurrentPrices();

            for (CryptoCurrency crypto : currentCryptos) {
                cryptoService.saveCrypto(crypto);
            }

            // ‚úÖ NOVO: Publicar evento para usu√°rio espec√≠fico
            publishCryptoUpdateEvent(currentCryptos, userEmail, CryptoUpdateEvent.UpdateType.MANUAL_UPDATE);

            log.info("‚úÖ Atualiza√ß√£o manual conclu√≠da para {}. {} moedas processadas",
                    userEmail, currentCryptos.size());

        } catch (Exception e) {
            log.error("‚ùå Erro na atualiza√ß√£o manual para {}: {}", userEmail, e.getMessage(), e);
            throw new RuntimeException("Falha na atualiza√ß√£o manual", e);
        }
    }

    /**
     * ‚úÖ MANTIDO - Processa alertas para uma crypto espec√≠fica
     */
    public void processAlertsForCrypto(String coinId) {
        try {
            cryptoService.getCryptoByCoinId(coinId)
                    .ifPresentOrElse(
                            crypto -> {
                                CryptoCurrency savedCrypto = cryptoService.saveCrypto(crypto);

                                // ‚úÖ NOVO: Publicar evento para crypto espec√≠fica
                                publishCryptoUpdateEvent(
                                        List.of(savedCrypto),
                                        null,
                                        CryptoUpdateEvent.UpdateType.SINGLE_CRYPTO
                                );

                                log.info("‚úÖ Alertas processados para {}", coinId);
                            },
                            () -> log.warn("‚ö†Ô∏è Criptomoeda {} n√£o encontrada", coinId)
                    );
        } catch (Exception e) {
            log.error("‚ùå Erro ao processar alertas para {}: {}", coinId, e.getMessage());
        }
    }

    /**
     * ‚úÖ MANTIDO - Processa alertas para crypto e usu√°rio espec√≠ficos
     */
    public void processAlertsForCryptoAndUser(String coinId, String userEmail) {
        try {
            log.info("üîç Processando alertas de {} para {}", coinId, userEmail);

            cryptoService.getCryptoByCoinId(coinId)
                    .ifPresentOrElse(
                            crypto -> {
                                CryptoCurrency savedCrypto = cryptoService.saveCrypto(crypto);

                                // ‚úÖ NOVO: Publicar evento para usu√°rio espec√≠fico
                                publishCryptoUpdateEvent(
                                        List.of(savedCrypto),
                                        userEmail,
                                        CryptoUpdateEvent.UpdateType.SINGLE_CRYPTO
                                );

                                log.info("‚úÖ Alertas processados para {} (usu√°rio: {})", coinId, userEmail);
                            },
                            () -> log.warn("‚ö†Ô∏è Criptomoeda {} n√£o encontrada", coinId)
                    );
        } catch (Exception e) {
            log.error("‚ùå Erro ao processar alertas para {} (usu√°rio: {}): {}",
                    coinId, userEmail, e.getMessage());
        }
    }

    /**
     * ‚úÖ MANTIDO - Estat√≠sticas do monitoramento
     */
    public MonitoringStats getMonitoringStats() {
        try {
            List<CryptoCurrency> savedCryptos = cryptoService.getAllSavedCryptos();

            return MonitoringStats.builder()
                    .totalCryptocurrencies(savedCryptos.size())
                    .totalActiveAlerts(0) // AlertService n√£o √© mais depend√™ncia direta
                    .lastUpdate(savedCryptos.isEmpty() ? null :
                            savedCryptos.get(0).getLastUpdated())
                    .build();

        } catch (Exception e) {
            log.error("‚ùå Erro ao obter estat√≠sticas: {}", e.getMessage());
            return MonitoringStats.builder()
                    .totalCryptocurrencies(0)
                    .totalActiveAlerts(0)
                    .build();
        }
    }

    /**
     * ‚úÖ NOVO - M√©todo auxiliar para publicar eventos
     */
    private void publishCryptoUpdateEvent(List<CryptoCurrency> cryptos, String userEmail, CryptoUpdateEvent.UpdateType type) {
        try {
            CryptoUpdateEvent event = userEmail == null
                    ? new CryptoUpdateEvent(this, cryptos, type)
                    : new CryptoUpdateEvent(this, cryptos, userEmail, type);

            eventPublisher.publishEvent(event);

            log.debug("üì§ Evento publicado: {} cryptos, tipo: {}, usu√°rio: {}",
                    cryptos.size(), type, userEmail != null ? userEmail : "global");

        } catch (Exception e) {
            log.error("‚ùå Erro ao publicar evento: {}", e.getMessage(), e);
        }
    }

    /**
     * ‚úÖ MANTIDO - Classe interna para estat√≠sticas
     */
    @lombok.Builder
    @lombok.Data
    public static class MonitoringStats {
        private int totalCryptocurrencies;
        private long totalActiveAlerts;
        private java.time.LocalDateTime lastUpdate;
    }
}