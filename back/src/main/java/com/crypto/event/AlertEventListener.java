// back/src/main/java/com/crypto/event/AlertEventListener.java
package com.crypto.event;

import com.crypto.service.AlertService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.context.event.EventListener;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Component;

/**
 * Listener que reage a eventos de atualiza√ß√£o de criptomoedas
 * Processa alertas de forma ass√≠ncrona e desacoplada
 *
 * ‚úÖ RESOLVE DEPEND√äNCIA CIRCULAR:
 * - Antes: CryptoMonitoringService ‚Üí AlertService ‚Üí CryptoService ‚Üí CryptoMonitoringService
 * - Agora: CryptoMonitoringService ‚Üí Event ‚Üí AlertEventListener ‚Üí AlertService
 */
@Slf4j
@Component
@RequiredArgsConstructor
public class AlertEventListener {

    private final AlertService alertService;

    /**
     * Processa alertas quando cryptos s√£o atualizadas
     * Executado de forma ASS√çNCRONA para n√£o bloquear o publisher
     */
    @Async
    @EventListener
    public void handleCryptoUpdate(CryptoUpdateEvent event) {
        try {
            log.debug("üì¨ Evento recebido: {} cryptos, tipo: {}",
                    event.getCryptoCurrencies().size(),
                    event.getType()
            );

            // Processar alertas baseado no tipo de atualiza√ß√£o
            if (event.isGlobalUpdate()) {
                // Atualiza√ß√£o global - processar para todos usu√°rios
                log.debug("üåç Processando alertas globais");
                alertService.processAlerts(event.getCryptoCurrencies());

            } else {
                // Atualiza√ß√£o de usu√°rio espec√≠fico
                log.debug("üë§ Processando alertas para: {}", event.getUserEmail());
                alertService.processAlertsForUser(
                        event.getCryptoCurrencies(),
                        event.getUserEmail()
                );
            }

        } catch (Exception e) {
            log.error("‚ùå Erro ao processar evento de atualiza√ß√£o: {}", e.getMessage(), e);
            // N√£o propagar exce√ß√£o - n√£o queremos falhar o publisher
        }
    }
}